//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NNworking.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NN_DatabaseEntities : DbContext
    {
        public NN_DatabaseEntities()
            : base("name=NN_DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C222_CarRegister> C222_CarRegister { get; set; }
        public virtual DbSet<C222_Cars> C222_Cars { get; set; }
        public virtual DbSet<C222_DayWork> C222_DayWork { get; set; }
        public virtual DbSet<C222_Department> C222_Department { get; set; }
        public virtual DbSet<C222_GroupMachine> C222_GroupMachine { get; set; }
        public virtual DbSet<C222_LeaderDailyInput> C222_LeaderDailyInput { get; set; }
        public virtual DbSet<C222_LeaderMonthlyInput> C222_LeaderMonthlyInput { get; set; }
        public virtual DbSet<C222_LeaderWeeklyInput> C222_LeaderWeeklyInput { get; set; }
        public virtual DbSet<C222_Machine> C222_Machine { get; set; }
        public virtual DbSet<C222_MachineDepartment> C222_MachineDepartment { get; set; }
        public virtual DbSet<C222_MaterialConfiguration> C222_MaterialConfiguration { get; set; }
        public virtual DbSet<C222_MaterialStock> C222_MaterialStock { get; set; }
        public virtual DbSet<C222_MaterialStock_Input> C222_MaterialStock_Input { get; set; }
        public virtual DbSet<C222_MaterialStock_Output> C222_MaterialStock_Output { get; set; }
        public virtual DbSet<C222_MeetingComment> C222_MeetingComment { get; set; }
        public virtual DbSet<C222_MeetingContent> C222_MeetingContent { get; set; }
        public virtual DbSet<C222_MeetingUploadFile> C222_MeetingUploadFile { get; set; }
        public virtual DbSet<C222_Notification_DataTime> C222_Notification_DataTime { get; set; }
        public virtual DbSet<C222_NotificationEmail> C222_NotificationEmail { get; set; }
        public virtual DbSet<C222_NotificationFunctionList> C222_NotificationFunctionList { get; set; }
        public virtual DbSet<C222_NotificationSendingEmail> C222_NotificationSendingEmail { get; set; }
        public virtual DbSet<C222_NotificationSendType> C222_NotificationSendType { get; set; }
        public virtual DbSet<C222_Partner> C222_Partner { get; set; }
        public virtual DbSet<C222_PartnerType> C222_PartnerType { get; set; }
        public virtual DbSet<C222_ReportList> C222_ReportList { get; set; }
        public virtual DbSet<C222_Shift> C222_Shift { get; set; }
        public virtual DbSet<C222_ShiftRegister> C222_ShiftRegister { get; set; }
        public virtual DbSet<C222_Staff> C222_Staff { get; set; }
        public virtual DbSet<C222_StockerItem> C222_StockerItem { get; set; }
        public virtual DbSet<C222_StockerItemType> C222_StockerItemType { get; set; }
        public virtual DbSet<C222_StockerOutputDEtail> C222_StockerOutputDEtail { get; set; }
        public virtual DbSet<C222_StokerCatergory> C222_StokerCatergory { get; set; }
        public virtual DbSet<C222_StokerCatergoryType> C222_StokerCatergoryType { get; set; }
        public virtual DbSet<C222_StokerInput> C222_StokerInput { get; set; }
        public virtual DbSet<C222_StokerMenu> C222_StokerMenu { get; set; }
        public virtual DbSet<C222_StokerOrder> C222_StokerOrder { get; set; }
        public virtual DbSet<C222_StokerOrderDetail> C222_StokerOrderDetail { get; set; }
        public virtual DbSet<C222_StokerOutput> C222_StokerOutput { get; set; }
        public virtual DbSet<C222_StokerTool> C222_StokerTool { get; set; }
        public virtual DbSet<C222_StokerUnit> C222_StokerUnit { get; set; }
        public virtual DbSet<C222_TimeCard> C222_TimeCard { get; set; }
        public virtual DbSet<C222_TimeCardDetail> C222_TimeCardDetail { get; set; }
        public virtual DbSet<C222_Users> C222_Users { get; set; }
        public virtual DbSet<C222_WebPermission> C222_WebPermission { get; set; }
        public virtual DbSet<C222_WebUrl> C222_WebUrl { get; set; }
        public virtual DbSet<C222_Work> C222_Work { get; set; }
        public virtual DbSet<C242_BusOder> C242_BusOder { get; set; }
        public virtual DbSet<C242_BusOder_ActualQty> C242_BusOder_ActualQty { get; set; }
        public virtual DbSet<C242_DeceidedTime> C242_DeceidedTime { get; set; }
        public virtual DbSet<C242_ErrorContent> C242_ErrorContent { get; set; }
        public virtual DbSet<C242_ErrorHappenFrequency> C242_ErrorHappenFrequency { get; set; }
        public virtual DbSet<C242_ErrorItemEvaluate> C242_ErrorItemEvaluate { get; set; }
        public virtual DbSet<C242_ErrorItemNotify> C242_ErrorItemNotify { get; set; }
        public virtual DbSet<C242_ErrorProcess> C242_ErrorProcess { get; set; }
        public virtual DbSet<C242_ErrorType> C242_ErrorType { get; set; }
        public virtual DbSet<C242_HandOverItem> C242_HandOverItem { get; set; }
        public virtual DbSet<C242_InventoryExportHistory> C242_InventoryExportHistory { get; set; }
        public virtual DbSet<C242_InventoryInputHistory> C242_InventoryInputHistory { get; set; }
        public virtual DbSet<C242_InventoryReceived> C242_InventoryReceived { get; set; }
        public virtual DbSet<C242_InventoryReceivedDetail> C242_InventoryReceivedDetail { get; set; }
        public virtual DbSet<C242_MachinePlan_Preparation> C242_MachinePlan_Preparation { get; set; }
        public virtual DbSet<C242_MachinePlanning> C242_MachinePlanning { get; set; }
        public virtual DbSet<C242_MachinePlanningOrderNull> C242_MachinePlanningOrderNull { get; set; }
        public virtual DbSet<C242_ManualExcutionChecking> C242_ManualExcutionChecking { get; set; }
        public virtual DbSet<C242_Material> C242_Material { get; set; }
        public virtual DbSet<C242_MechanicalElectronicalWork> C242_MechanicalElectronicalWork { get; set; }
        public virtual DbSet<C242_MO> C242_MO { get; set; }
        public virtual DbSet<C242_MOOption> C242_MOOption { get; set; }
        public virtual DbSet<C242_Option> C242_Option { get; set; }
        public virtual DbSet<C242_OptionData> C242_OptionData { get; set; }
        public virtual DbSet<C242_OrderType> C242_OrderType { get; set; }
        public virtual DbSet<C242_P_NhapOrderlapKHGC> C242_P_NhapOrderlapKHGC { get; set; }
        public virtual DbSet<C242_Part> C242_Part { get; set; }
        public virtual DbSet<C242_PartData> C242_PartData { get; set; }
        public virtual DbSet<C242_PredictErrorCause> C242_PredictErrorCause { get; set; }
        public virtual DbSet<C242_ShiftHandOver> C242_ShiftHandOver { get; set; }
        public virtual DbSet<C242_StandTime> C242_StandTime { get; set; }
        public virtual DbSet<C242_TechJob1> C242_TechJob1 { get; set; }
        public virtual DbSet<C242_TechJob2> C242_TechJob2 { get; set; }
        public virtual DbSet<C242_ToolBorrow> C242_ToolBorrow { get; set; }
        public virtual DbSet<C242_ToolBorrowDetail> C242_ToolBorrowDetail { get; set; }
        public virtual DbSet<C242_Work> C242_Work { get; set; }
        public virtual DbSet<C242_WTS> C242_WTS { get; set; }
        public virtual DbSet<C242_YCKP> C242_YCKP { get; set; }
        public virtual DbSet<C222_PathOfSofware> C222_PathOfSofware { get; set; }
        public virtual DbSet<C222_RootPath> C222_RootPath { get; set; }
        public virtual DbSet<C222_StaffShift> C222_StaffShift { get; set; }
        public virtual DbSet<C222_StokerPurchase> C222_StokerPurchase { get; set; }
        public virtual DbSet<C222_WorkingDay> C222_WorkingDay { get; set; }
        public virtual DbSet<C242_ChangeDataLog> C242_ChangeDataLog { get; set; }
        public virtual DbSet<C242_DLMa> C242_DLMa { get; set; }
        public virtual DbSet<C242_Dulieudonhangmoi> C242_Dulieudonhangmoi { get; set; }
        public virtual DbSet<C242_Jig> C242_Jig { get; set; }
        public virtual DbSet<C242_MachinePlanning_cu> C242_MachinePlanning_cu { get; set; }
        public virtual DbSet<C242_ManualExcution> C242_ManualExcution { get; set; }
        public virtual DbSet<C242_OptionData2> C242_OptionData2 { get; set; }
        public virtual DbSet<C242_Planning> C242_Planning { get; set; }
        public virtual DbSet<C242_ResultOfCheckMachineProcess> C242_ResultOfCheckMachineProcess { get; set; }
        public virtual DbSet<C242_StandTimeAffectationCode> C242_StandTimeAffectationCode { get; set; }
        public virtual DbSet<C242_StandTimeManualChecking> C242_StandTimeManualChecking { get; set; }
        public virtual DbSet<C242_ToolReturn> C242_ToolReturn { get; set; }
        public virtual DbSet<C242_ToolsNeedForProcessing> C242_ToolsNeedForProcessing { get; set; }
        public virtual DbSet<C242_ToolType> C242_ToolType { get; set; }
        public virtual DbSet<C242_TrackingViTri> C242_TrackingViTri { get; set; }
        public virtual DbSet<C333_Borrow> C333_Borrow { get; set; }
        public virtual DbSet<C333_Return> C333_Return { get; set; }
        public virtual DbSet<C333_Tool> C333_Tool { get; set; }
        public virtual DbSet<CS_Area> CS_Area { get; set; }
        public virtual DbSet<CS_Category> CS_Category { get; set; }
        public virtual DbSet<CS_CheckSheet> CS_CheckSheet { get; set; }
        public virtual DbSet<CS_Comment> CS_Comment { get; set; }
        public virtual DbSet<CS_DailyMail> CS_DailyMail { get; set; }
        public virtual DbSet<CS_Department> CS_Department { get; set; }
        public virtual DbSet<CS_Evaluation> CS_Evaluation { get; set; }
        public virtual DbSet<CS_Evaluation_Planner> CS_Evaluation_Planner { get; set; }
        public virtual DbSet<CS_Group> CS_Group { get; set; }
        public virtual DbSet<CS_GroupCategory> CS_GroupCategory { get; set; }
        public virtual DbSet<CS_Position> CS_Position { get; set; }
        public virtual DbSet<CS_SubGroup> CS_SubGroup { get; set; }
        public virtual DbSet<CS_WorkStandard> CS_WorkStandard { get; set; }
        public virtual DbSet<DES_Drawing_FullOption> DES_Drawing_FullOption { get; set; }
        public virtual DbSet<DES_DrawingInfo> DES_DrawingInfo { get; set; }
        public virtual DbSet<DES_DWGFolder> DES_DWGFolder { get; set; }
        public virtual DbSet<DES_Platform_DrawingDWG> DES_Platform_DrawingDWG { get; set; }
        public virtual DbSet<Form_Approval_Process> Form_Approval_Process { get; set; }
        public virtual DbSet<Form_Approval_Process_Define> Form_Approval_Process_Define { get; set; }
        public virtual DbSet<Form_Categories> Form_Categories { get; set; }
        public virtual DbSet<Form_DirectManagement> Form_DirectManagement { get; set; }
        public virtual DbSet<Form_FieldType_LinkData> Form_FieldType_LinkData { get; set; }
        public virtual DbSet<Form_ListForm> Form_ListForm { get; set; }
        public virtual DbSet<Form_ListForm_DefineField> Form_ListForm_DefineField { get; set; }
        public virtual DbSet<Form_ListForm_Process_History> Form_ListForm_Process_History { get; set; }
        public virtual DbSet<Form_Operator> Form_Operator { get; set; }
        public virtual DbSet<Form_Operator_Backup> Form_Operator_Backup { get; set; }
        public virtual DbSet<Form_RequestList> Form_RequestList { get; set; }
        public virtual DbSet<Form_RequestList_Attachment> Form_RequestList_Attachment { get; set; }
        public virtual DbSet<Form_RequestList_Details> Form_RequestList_Details { get; set; }
        public virtual DbSet<Form_RequestList_Process_History> Form_RequestList_Process_History { get; set; }
        public virtual DbSet<Form_Signature> Form_Signature { get; set; }
        public virtual DbSet<HR_AllowanceShift> HR_AllowanceShift { get; set; }
        public virtual DbSet<HR_BusStation> HR_BusStation { get; set; }
        public virtual DbSet<HR_CerfiticateType> HR_CerfiticateType { get; set; }
        public virtual DbSet<HR_City> HR_City { get; set; }
        public virtual DbSet<HR_Classification> HR_Classification { get; set; }
        public virtual DbSet<HR_Country> HR_Country { get; set; }
        public virtual DbSet<HR_Department> HR_Department { get; set; }
        public virtual DbSet<HR_District> HR_District { get; set; }
        public virtual DbSet<HR_DSGiayNghi> HR_DSGiayNghi { get; set; }
        public virtual DbSet<HR_DSGiayNghi_QuaTrinhDuyet> HR_DSGiayNghi_QuaTrinhDuyet { get; set; }
        public virtual DbSet<HR_DSGiayNghi_TaskDuyet> HR_DSGiayNghi_TaskDuyet { get; set; }
        public virtual DbSet<HR_Educationlevel> HR_Educationlevel { get; set; }
        public virtual DbSet<HR_Gender> HR_Gender { get; set; }
        public virtual DbSet<HR_Group> HR_Group { get; set; }
        public virtual DbSet<HR_Informatic_Level> HR_Informatic_Level { get; set; }
        public virtual DbSet<HR_Language> HR_Language { get; set; }
        public virtual DbSet<HR_Language_Level> HR_Language_Level { get; set; }
        public virtual DbSet<HR_Majors> HR_Majors { get; set; }
        public virtual DbSet<HR_MajorsGroup> HR_MajorsGroup { get; set; }
        public virtual DbSet<HR_MaritalStatus> HR_MaritalStatus { get; set; }
        public virtual DbSet<HR_Menu> HR_Menu { get; set; }
        public virtual DbSet<HR_Menu_Access> HR_Menu_Access { get; set; }
        public virtual DbSet<HR_Nation> HR_Nation { get; set; }
        public virtual DbSet<HR_OldPassXinNghi> HR_OldPassXinNghi { get; set; }
        public virtual DbSet<HR_Position> HR_Position { get; set; }
        public virtual DbSet<HR_Privilege> HR_Privilege { get; set; }
        public virtual DbSet<HR_ProfileType> HR_ProfileType { get; set; }
        public virtual DbSet<HR_Recruiment_BlackList> HR_Recruiment_BlackList { get; set; }
        public virtual DbSet<HR_Recruiment_Candidate> HR_Recruiment_Candidate { get; set; }
        public virtual DbSet<HR_Recruiment_Plan_ByYear> HR_Recruiment_Plan_ByYear { get; set; }
        public virtual DbSet<HR_Recruiment_Position_Define> HR_Recruiment_Position_Define { get; set; }
        public virtual DbSet<HR_Recruiment_Position_Define_Details> HR_Recruiment_Position_Define_Details { get; set; }
        public virtual DbSet<HR_Recruiment_Profile> HR_Recruiment_Profile { get; set; }
        public virtual DbSet<HR_Recruiment_Profile_Result> HR_Recruiment_Profile_Result { get; set; }
        public virtual DbSet<HR_Recruiment_Profile_Status> HR_Recruiment_Profile_Status { get; set; }
        public virtual DbSet<HR_Recruiment_ProfileSource> HR_Recruiment_ProfileSource { get; set; }
        public virtual DbSet<HR_Recruiment_Stage> HR_Recruiment_Stage { get; set; }
        public virtual DbSet<HR_Recruiment_Stage_Details> HR_Recruiment_Stage_Details { get; set; }
        public virtual DbSet<HR_Relation> HR_Relation { get; set; }
        public virtual DbSet<HR_School> HR_School { get; set; }
        public virtual DbSet<HR_SourceCV> HR_SourceCV { get; set; }
        public virtual DbSet<HR_StaffProfile> HR_StaffProfile { get; set; }
        public virtual DbSet<HR_StaffProfile_Approver> HR_StaffProfile_Approver { get; set; }
        public virtual DbSet<HR_Staffprofile_ComputerSkill> HR_Staffprofile_ComputerSkill { get; set; }
        public virtual DbSet<HR_Staffprofile_ComputerSkill_WaitApprove> HR_Staffprofile_ComputerSkill_WaitApprove { get; set; }
        public virtual DbSet<HR_StaffProfile_Education> HR_StaffProfile_Education { get; set; }
        public virtual DbSet<HR_StaffProfile_Education_WaitApprove> HR_StaffProfile_Education_WaitApprove { get; set; }
        public virtual DbSet<HR_StaffProfile_FamilyRelation> HR_StaffProfile_FamilyRelation { get; set; }
        public virtual DbSet<HR_StaffProfile_FamilyRelation_WaitApprove> HR_StaffProfile_FamilyRelation_WaitApprove { get; set; }
        public virtual DbSet<HR_StaffProfile_ForeignLanguage> HR_StaffProfile_ForeignLanguage { get; set; }
        public virtual DbSet<HR_StaffProfile_ForeignLanguage_WaitApprove> HR_StaffProfile_ForeignLanguage_WaitApprove { get; set; }
        public virtual DbSet<HR_StaffProfile_History> HR_StaffProfile_History { get; set; }
        public virtual DbSet<HR_StaffProfile_WaitApprove> HR_StaffProfile_WaitApprove { get; set; }
        public virtual DbSet<HR_StaffProfile_WorkInformation> HR_StaffProfile_WorkInformation { get; set; }
        public virtual DbSet<HR_StaffProfile_WorkInformation_WaitApprove> HR_StaffProfile_WorkInformation_WaitApprove { get; set; }
        public virtual DbSet<HR_StaffProfile_WorkProcess> HR_StaffProfile_WorkProcess { get; set; }
        public virtual DbSet<HR_StaffProfile_WorkProcess_WaitApprove> HR_StaffProfile_WorkProcess_WaitApprove { get; set; }
        public virtual DbSet<HR_StaffType> HR_StaffType { get; set; }
        public virtual DbSet<HR_StatusWork> HR_StatusWork { get; set; }
        public virtual DbSet<HR_TrainingType> HR_TrainingType { get; set; }
        public virtual DbSet<HR_TypeReason> HR_TypeReason { get; set; }
        public virtual DbSet<HR_Village_Ward> HR_Village_Ward { get; set; }
        public virtual DbSet<Quiz_Answers> Quiz_Answers { get; set; }
        public virtual DbSet<Quiz_DailyNumberQuizRegister_SHDF2> Quiz_DailyNumberQuizRegister_SHDF2 { get; set; }
        public virtual DbSet<Quiz_DailyNumberQuizRegister_SHDF2_AutoEmail_Log> Quiz_DailyNumberQuizRegister_SHDF2_AutoEmail_Log { get; set; }
        public virtual DbSet<Quiz_Exam_Attempt> Quiz_Exam_Attempt { get; set; }
        public virtual DbSet<Quiz_Exam_Result> Quiz_Exam_Result { get; set; }
        public virtual DbSet<Quiz_Exam_Result_PathResult> Quiz_Exam_Result_PathResult { get; set; }
        public virtual DbSet<Quiz_Exam_Slots> Quiz_Exam_Slots { get; set; }
        public virtual DbSet<Quiz_ExamAttend_Layout> Quiz_ExamAttend_Layout { get; set; }
        public virtual DbSet<Quiz_ExamGroup> Quiz_ExamGroup { get; set; }
        public virtual DbSet<Quiz_ExamGroup_1700_1428_2688_20190812> Quiz_ExamGroup_1700_1428_2688_20190812 { get; set; }
        public virtual DbSet<Quiz_Exams> Quiz_Exams { get; set; }
        public virtual DbSet<Quiz_Exams_1700_1428_2688_20190812> Quiz_Exams_1700_1428_2688_20190812 { get; set; }
        public virtual DbSet<Quiz_F2_Exam_Define> Quiz_F2_Exam_Define { get; set; }
        public virtual DbSet<Quiz_GroupQuestion> Quiz_GroupQuestion { get; set; }
        public virtual DbSet<Quiz_GroupQuestion_1700_1428_2688_20190812> Quiz_GroupQuestion_1700_1428_2688_20190812 { get; set; }
        public virtual DbSet<Quiz_GroupSHDF2> Quiz_GroupSHDF2 { get; set; }
        public virtual DbSet<Quiz_ParentQuestion> Quiz_ParentQuestion { get; set; }
        public virtual DbSet<Quiz_Phase> Quiz_Phase { get; set; }
        public virtual DbSet<Quiz_Phase_1700_1428_2688_20190812> Quiz_Phase_1700_1428_2688_20190812 { get; set; }
        public virtual DbSet<Quiz_Question> Quiz_Question { get; set; }
        public virtual DbSet<Quiz_Question_1700_1428_2688_20190812> Quiz_Question_1700_1428_2688_20190812 { get; set; }
        public virtual DbSet<Quiz_StaffInGroup> Quiz_StaffInGroup { get; set; }
        public virtual DbSet<Quiz_User> Quiz_User { get; set; }
        public virtual DbSet<RP_DefineCheckReport> RP_DefineCheckReport { get; set; }
        public virtual DbSet<RP_DefineCheckReport_History> RP_DefineCheckReport_History { get; set; }
        public virtual DbSet<SM_Authority> SM_Authority { get; set; }
        public virtual DbSet<SM_CurrentPosition> SM_CurrentPosition { get; set; }
        public virtual DbSet<SM_DailyReport> SM_DailyReport { get; set; }
        public virtual DbSet<SM_DailyReport_Evaluation> SM_DailyReport_Evaluation { get; set; }
        public virtual DbSet<SM_DailyReportRequirement> SM_DailyReportRequirement { get; set; }
        public virtual DbSet<SM_Department> SM_Department { get; set; }
        public virtual DbSet<SM_FCD> SM_FCD { get; set; }
        public virtual DbSet<SM_InitialTraining> SM_InitialTraining { get; set; }
        public virtual DbSet<SM_PeriodicSkill> SM_PeriodicSkill { get; set; }
        public virtual DbSet<SM_PeriodicSkillResult> SM_PeriodicSkillResult { get; set; }
        public virtual DbSet<SM_Skill> SM_Skill { get; set; }
        public virtual DbSet<SM_SkillComp> SM_SkillComp { get; set; }
        public virtual DbSet<SM_SkillResult> SM_SkillResult { get; set; }
        public virtual DbSet<SM_SkillWork> SM_SkillWork { get; set; }
        public virtual DbSet<SM_TrainingProgram> SM_TrainingProgram { get; set; }
        public virtual DbSet<SM_Work> SM_Work { get; set; }
        public virtual DbSet<SM_WorkGroup> SM_WorkGroup { get; set; }
        public virtual DbSet<SM_WorkOfWorkGroup> SM_WorkOfWorkGroup { get; set; }
        public virtual DbSet<SM_WorkPosition> SM_WorkPosition { get; set; }
        public virtual DbSet<StaffListCheck202002> StaffListCheck202002 { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Training_Group_TrainingContent> Training_Group_TrainingContent { get; set; }
        public virtual DbSet<Training_Stage> Training_Stage { get; set; }
        public virtual DbSet<Training_Stage_Attend_Staff> Training_Stage_Attend_Staff { get; set; }
        public virtual DbSet<Training_Stage_Details_And_Result> Training_Stage_Details_And_Result { get; set; }
        public virtual DbSet<Training_TestName> Training_TestName { get; set; }
        public virtual DbSet<Training_TrainingContent> Training_TrainingContent { get; set; }
        public virtual DbSet<Welfare_EmailAccounting> Welfare_EmailAccounting { get; set; }
        public virtual DbSet<Welfare_List> Welfare_List { get; set; }
        public virtual DbSet<Welfare_PayList> Welfare_PayList { get; set; }
        public virtual DbSet<Welfare_Permission> Welfare_Permission { get; set; }
        public virtual DbSet<Welfare_Relative> Welfare_Relative { get; set; }
        public virtual DbSet<Welfare_Rule> Welfare_Rule { get; set; }
        public virtual DbSet<WorkingNotifycation> WorkingNotifycations { get; set; }
        public virtual DbSet<C242_MachinePlanning_view> C242_MachinePlanning_view { get; set; }
        public virtual DbSet<P_LayNClamKHGcong01> P_LayNClamKHGcong01 { get; set; }
        public virtual DbSet<P_LayNClamKHGcong01_All> P_LayNClamKHGcong01_All { get; set; }
        public virtual DbSet<P_LayNClamKHGcong02> P_LayNClamKHGcong02 { get; set; }
        public virtual DbSet<P_LayNClamKHGcong03> P_LayNClamKHGcong03 { get; set; }
        public virtual DbSet<View_222_Department> View_222_Department { get; set; }
        public virtual DbSet<View_222_GroupMachine> View_222_GroupMachine { get; set; }
        public virtual DbSet<View_222_Machine> View_222_Machine { get; set; }
        public virtual DbSet<View_222_MachineDepartment> View_222_MachineDepartment { get; set; }
        public virtual DbSet<View_222_MaterialStock> View_222_MaterialStock { get; set; }
        public virtual DbSet<View_222_MeetingComment> View_222_MeetingComment { get; set; }
        public virtual DbSet<View_222_MeetingContent> View_222_MeetingContent { get; set; }
        public virtual DbSet<View_222_Partner> View_222_Partner { get; set; }
        public virtual DbSet<View_222_ShiftRegister> View_222_ShiftRegister { get; set; }
        public virtual DbSet<View_222_Staff> View_222_Staff { get; set; }
        public virtual DbSet<View_222_StokerInput> View_222_StokerInput { get; set; }
        public virtual DbSet<View_222_StokerMenu> View_222_StokerMenu { get; set; }
        public virtual DbSet<View_222_StokerOutput> View_222_StokerOutput { get; set; }
        public virtual DbSet<View_222_StokerTool> View_222_StokerTool { get; set; }
        public virtual DbSet<View_222_TimeCard> View_222_TimeCard { get; set; }
        public virtual DbSet<View_222_TimeCardDetail> View_222_TimeCardDetail { get; set; }
        public virtual DbSet<View_222_Users> View_222_Users { get; set; }
        public virtual DbSet<View_222_WebPermission> View_222_WebPermission { get; set; }
        public virtual DbSet<View_242_BusOder> View_242_BusOder { get; set; }
        public virtual DbSet<View_242_ErrorItemNotify> View_242_ErrorItemNotify { get; set; }
        public virtual DbSet<View_242_InventoryData> View_242_InventoryData { get; set; }
        public virtual DbSet<View_242_InventoryExport> View_242_InventoryExport { get; set; }
        public virtual DbSet<View_242_InventoryReceived> View_242_InventoryReceived { get; set; }
        public virtual DbSet<View_242_InventoryReceivedDetail> View_242_InventoryReceivedDetail { get; set; }
        public virtual DbSet<View_242_Jig> View_242_Jig { get; set; }
        public virtual DbSet<View_242_Material> View_242_Material { get; set; }
        public virtual DbSet<View_242_MOOption> View_242_MOOption { get; set; }
        public virtual DbSet<View_242_Option> View_242_Option { get; set; }
        public virtual DbSet<View_242_OptionData> View_242_OptionData { get; set; }
        public virtual DbSet<View_242_Part> View_242_Part { get; set; }
        public virtual DbSet<View_242_PartData> View_242_PartData { get; set; }
        public virtual DbSet<View_242_Planning> View_242_Planning { get; set; }
        public virtual DbSet<View_242_ShiftHandOver> View_242_ShiftHandOver { get; set; }
        public virtual DbSet<View_242_WTS> View_242_WTS { get; set; }
        public virtual DbSet<View_242_YCKP> View_242_YCKP { get; set; }
        public virtual DbSet<View_ManualExcutionChecking_GetCurrent> View_ManualExcutionChecking_GetCurrent { get; set; }
        public virtual DbSet<View_ManualExcutionChecking_GetTotal> View_ManualExcutionChecking_GetTotal { get; set; }
        public virtual DbSet<View_ToLenh> View_ToLenh { get; set; }
        public virtual DbSet<View_Tracking_History> View_Tracking_History { get; set; }
        public virtual DbSet<Welfare_V_StaffProfile> Welfare_V_StaffProfile { get; set; }
        public virtual DbSet<C242_ErrorItemNotify_New> C242_ErrorItemNotify_New { get; set; }
        public virtual DbSet<C242_ErrorItemStatus> C242_ErrorItemStatus { get; set; }
        public virtual DbSet<C242_ErrorItemNotify_View> C242_ErrorItemNotify_View { get; set; }
    
        public virtual ObjectResult<sp_222_AcquireNotifications_Result> sp_222_AcquireNotifications(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("staffID", staffID) :
                new ObjectParameter("staffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_222_AcquireNotifications_Result>("sp_222_AcquireNotifications", staffIDParameter);
        }
    
        public virtual ObjectResult<sp_222_CompareWorkTimeAndRegistedTime_Result> sp_222_CompareWorkTimeAndRegistedTime(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_222_CompareWorkTimeAndRegistedTime_Result>("sp_222_CompareWorkTimeAndRegistedTime", fromdateParameter, todateParameter);
        }
    
        public virtual int sp_222_Department_Update(Nullable<int> iD, string deptCode, string deptName, Nullable<bool> deleted)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_222_Department_Update", iDParameter, deptCodeParameter, deptNameParameter, deletedParameter);
        }
    
        public virtual ObjectResult<sp_222_Machine_GetMachineStatus_Result> sp_222_Machine_GetMachineStatus(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_222_Machine_GetMachineStatus_Result>("sp_222_Machine_GetMachineStatus", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_222_MealStatics_Result> sp_222_MealStatics(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_222_MealStatics_Result>("sp_222_MealStatics", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_222_PartnerGetAll_Result> sp_222_PartnerGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_222_PartnerGetAll_Result>("sp_222_PartnerGetAll");
        }
    
        public virtual ObjectResult<sp_222_StockerOutput_OutputPreparation_Result> sp_222_StockerOutput_OutputPreparation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_222_StockerOutput_OutputPreparation_Result>("sp_222_StockerOutput_OutputPreparation");
        }
    
        public virtual ObjectResult<sp_222_StockerOutput_OutputPreparation_Detail_Result> sp_222_StockerOutput_OutputPreparation_Detail(string partID)
        {
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_222_StockerOutput_OutputPreparation_Detail_Result>("sp_222_StockerOutput_OutputPreparation_Detail", partIDParameter);
        }
    
        public virtual ObjectResult<Sp_222_stokertool_InOut_Result> Sp_222_stokertool_InOut()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_222_stokertool_InOut_Result>("Sp_222_stokertool_InOut");
        }
    
        public virtual int sp_242_BusOder_Cancel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_Cancel");
        }
    
        public virtual int sp_242_BusOder_ChangeDeadLine(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_ChangeDeadLine", staffIDParameter);
        }
    
        public virtual ObjectResult<sp_242_BusOder_CheckProcessTime_Result> sp_242_BusOder_CheckProcessTime(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_BusOder_CheckProcessTime_Result>("sp_242_BusOder_CheckProcessTime", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_242_BusOder_Finish(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_Finish", staffIDParameter);
        }
    
        public virtual ObjectResult<sp_242_BusOder_GetByMonth_Result> sp_242_BusOder_GetByMonth(string month)
        {
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_BusOder_GetByMonth_Result>("sp_242_BusOder_GetByMonth", monthParameter);
        }
    
        public virtual ObjectResult<sp_242_BusOder_HangThieu_Result> sp_242_BusOder_HangThieu(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_BusOder_HangThieu_Result>("sp_242_BusOder_HangThieu", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_242_BusOder_Insert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_Insert");
        }
    
        public virtual int sp_242_BusOder_InToLenh()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_InToLenh");
        }
    
        public virtual ObjectResult<sp_242_BusOder_Month_FinishNumber_Result> sp_242_BusOder_Month_FinishNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_BusOder_Month_FinishNumber_Result>("sp_242_BusOder_Month_FinishNumber");
        }
    
        public virtual int sp_242_BusOder_OrderCat(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_OrderCat", staffIDParameter);
        }
    
        public virtual int sp_242_BusOder_PaymentStatus(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_PaymentStatus", staffIDParameter);
        }
    
        public virtual int sp_242_BusOder_Start()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_Start");
        }
    
        public virtual int sp_242_BusOder_Status(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_Status", staffIDParameter);
        }
    
        public virtual int sp_242_BusOder_Update(Nullable<int> iD, Nullable<System.DateTime> date, string bOderNo, string planNo, string partID, Nullable<int> qty, Nullable<System.DateTime> deadline, Nullable<bool> rawQty, Nullable<int> helisertQty, Nullable<int> blastQty, string mONo, Nullable<int> mOQty, Nullable<bool> started, Nullable<bool> finished, string change, Nullable<System.DateTime> changeDate, Nullable<bool> imported, string note, Nullable<System.DateTime> finishDate, string importFrom)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var bOderNoParameter = bOderNo != null ?
                new ObjectParameter("BOderNo", bOderNo) :
                new ObjectParameter("BOderNo", typeof(string));
    
            var planNoParameter = planNo != null ?
                new ObjectParameter("PlanNo", planNo) :
                new ObjectParameter("PlanNo", typeof(string));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var deadlineParameter = deadline.HasValue ?
                new ObjectParameter("Deadline", deadline) :
                new ObjectParameter("Deadline", typeof(System.DateTime));
    
            var rawQtyParameter = rawQty.HasValue ?
                new ObjectParameter("RawQty", rawQty) :
                new ObjectParameter("RawQty", typeof(bool));
    
            var helisertQtyParameter = helisertQty.HasValue ?
                new ObjectParameter("HelisertQty", helisertQty) :
                new ObjectParameter("HelisertQty", typeof(int));
    
            var blastQtyParameter = blastQty.HasValue ?
                new ObjectParameter("BlastQty", blastQty) :
                new ObjectParameter("BlastQty", typeof(int));
    
            var mONoParameter = mONo != null ?
                new ObjectParameter("MONo", mONo) :
                new ObjectParameter("MONo", typeof(string));
    
            var mOQtyParameter = mOQty.HasValue ?
                new ObjectParameter("MOQty", mOQty) :
                new ObjectParameter("MOQty", typeof(int));
    
            var startedParameter = started.HasValue ?
                new ObjectParameter("Started", started) :
                new ObjectParameter("Started", typeof(bool));
    
            var finishedParameter = finished.HasValue ?
                new ObjectParameter("Finished", finished) :
                new ObjectParameter("Finished", typeof(bool));
    
            var changeParameter = change != null ?
                new ObjectParameter("Change", change) :
                new ObjectParameter("Change", typeof(string));
    
            var changeDateParameter = changeDate.HasValue ?
                new ObjectParameter("ChangeDate", changeDate) :
                new ObjectParameter("ChangeDate", typeof(System.DateTime));
    
            var importedParameter = imported.HasValue ?
                new ObjectParameter("Imported", imported) :
                new ObjectParameter("Imported", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var finishDateParameter = finishDate.HasValue ?
                new ObjectParameter("FinishDate", finishDate) :
                new ObjectParameter("FinishDate", typeof(System.DateTime));
    
            var importFromParameter = importFrom != null ?
                new ObjectParameter("ImportFrom", importFrom) :
                new ObjectParameter("ImportFrom", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_BusOder_Update", iDParameter, dateParameter, bOderNoParameter, planNoParameter, partIDParameter, qtyParameter, deadlineParameter, rawQtyParameter, helisertQtyParameter, blastQtyParameter, mONoParameter, mOQtyParameter, startedParameter, finishedParameter, changeParameter, changeDateParameter, importedParameter, noteParameter, finishDateParameter, importFromParameter);
        }
    
        public virtual int sp_242_CreateOrderNull_New(string part, string slg, string jigNo)
        {
            var partParameter = part != null ?
                new ObjectParameter("part", part) :
                new ObjectParameter("part", typeof(string));
    
            var slgParameter = slg != null ?
                new ObjectParameter("slg", slg) :
                new ObjectParameter("slg", typeof(string));
    
            var jigNoParameter = jigNo != null ?
                new ObjectParameter("jigNo", jigNo) :
                new ObjectParameter("jigNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_CreateOrderNull_New", partParameter, slgParameter, jigNoParameter);
        }
    
        public virtual ObjectResult<sp_242_ErrorItem_NotComplete_Result> sp_242_ErrorItem_NotComplete(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ErrorItem_NotComplete_Result>("sp_242_ErrorItem_NotComplete", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_ErrorItemNotify_Expire_Result> sp_242_ErrorItemNotify_Expire(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ErrorItemNotify_Expire_Result>("sp_242_ErrorItemNotify_Expire", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_GetChatHistorySummarize_Result> sp_242_GetChatHistorySummarize(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_GetChatHistorySummarize_Result>("sp_242_GetChatHistorySummarize", staffIDParameter);
        }
    
        public virtual ObjectResult<sp_242_GetKhoTPReceivedForVerification_Result> sp_242_GetKhoTPReceivedForVerification(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_GetKhoTPReceivedForVerification_Result>("sp_242_GetKhoTPReceivedForVerification", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_242_GetWorkingTimePLJ1Total_Result> sp_242_GetWorkingTimePLJ1Total(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_GetWorkingTimePLJ1Total_Result>("sp_242_GetWorkingTimePLJ1Total", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_242_InsertPlan(Nullable<int> iD, string date, string dept, string dKmay, Nullable<bool> fac_DaChuanBi, Nullable<bool> fac_Dao, string fac_DeXuat, Nullable<bool> fac_File, Nullable<bool> fac_Jig, string fac_NgayHTTheoKH, string fac_NGTruoc, Nullable<int> fac_NG_Old, Nullable<int> fac_OK_Old, Nullable<bool> fac_Phoi, Nullable<int> fac_TT, string fac_TTFile, Nullable<int> fac_TTGC, Nullable<int> fac_TTTH, string finish, string jig, string k, string machineID, string nC, string note, string lastOption, string registerDate, string order, string partID, string shift, Nullable<int> slg, string soJig, string start, Nullable<double> tGGC, Nullable<double> tGGL, string thoiHan, Nullable<int> tinhTrang, string tTNC, string via_check1, string via_check2, string via_ghi_chu, Nullable<int> p__10, Nullable<int> p__20, Nullable<int> p__80, string fac_MachineID, Nullable<bool> fac_Dc, string kT_Sup, Nullable<int> kT_TGUKB1, Nullable<double> kT_TongTG, Nullable<int> kT_TTPhoi, string kT_GiaHang, string kT_KHXN, string kT_LyDoKHTKH, string kT_DgoiTay, string cua_GCTime, string cua_Factory, Nullable<double> cua_TotalTime, Nullable<double> cua_Plantime, string cua_PrepareDate, string cua_MachineGroup, Nullable<bool> cua_State, string cua_Size, string tongTG, string nesting, string phoidd, string viTriGia)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var dKmayParameter = dKmay != null ?
                new ObjectParameter("DKmay", dKmay) :
                new ObjectParameter("DKmay", typeof(string));
    
            var fac_DaChuanBiParameter = fac_DaChuanBi.HasValue ?
                new ObjectParameter("Fac_DaChuanBi", fac_DaChuanBi) :
                new ObjectParameter("Fac_DaChuanBi", typeof(bool));
    
            var fac_DaoParameter = fac_Dao.HasValue ?
                new ObjectParameter("Fac_Dao", fac_Dao) :
                new ObjectParameter("Fac_Dao", typeof(bool));
    
            var fac_DeXuatParameter = fac_DeXuat != null ?
                new ObjectParameter("Fac_DeXuat", fac_DeXuat) :
                new ObjectParameter("Fac_DeXuat", typeof(string));
    
            var fac_FileParameter = fac_File.HasValue ?
                new ObjectParameter("Fac_File", fac_File) :
                new ObjectParameter("Fac_File", typeof(bool));
    
            var fac_JigParameter = fac_Jig.HasValue ?
                new ObjectParameter("Fac_Jig", fac_Jig) :
                new ObjectParameter("Fac_Jig", typeof(bool));
    
            var fac_NgayHTTheoKHParameter = fac_NgayHTTheoKH != null ?
                new ObjectParameter("Fac_NgayHTTheoKH", fac_NgayHTTheoKH) :
                new ObjectParameter("Fac_NgayHTTheoKH", typeof(string));
    
            var fac_NGTruocParameter = fac_NGTruoc != null ?
                new ObjectParameter("Fac_NGTruoc", fac_NGTruoc) :
                new ObjectParameter("Fac_NGTruoc", typeof(string));
    
            var fac_NG_OldParameter = fac_NG_Old.HasValue ?
                new ObjectParameter("Fac_NG_Old", fac_NG_Old) :
                new ObjectParameter("Fac_NG_Old", typeof(int));
    
            var fac_OK_OldParameter = fac_OK_Old.HasValue ?
                new ObjectParameter("Fac_OK_Old", fac_OK_Old) :
                new ObjectParameter("Fac_OK_Old", typeof(int));
    
            var fac_PhoiParameter = fac_Phoi.HasValue ?
                new ObjectParameter("Fac_Phoi", fac_Phoi) :
                new ObjectParameter("Fac_Phoi", typeof(bool));
    
            var fac_TTParameter = fac_TT.HasValue ?
                new ObjectParameter("Fac_TT", fac_TT) :
                new ObjectParameter("Fac_TT", typeof(int));
    
            var fac_TTFileParameter = fac_TTFile != null ?
                new ObjectParameter("Fac_TTFile", fac_TTFile) :
                new ObjectParameter("Fac_TTFile", typeof(string));
    
            var fac_TTGCParameter = fac_TTGC.HasValue ?
                new ObjectParameter("Fac_TTGC", fac_TTGC) :
                new ObjectParameter("Fac_TTGC", typeof(int));
    
            var fac_TTTHParameter = fac_TTTH.HasValue ?
                new ObjectParameter("Fac_TTTH", fac_TTTH) :
                new ObjectParameter("Fac_TTTH", typeof(int));
    
            var finishParameter = finish != null ?
                new ObjectParameter("Finish", finish) :
                new ObjectParameter("Finish", typeof(string));
    
            var jigParameter = jig != null ?
                new ObjectParameter("Jig", jig) :
                new ObjectParameter("Jig", typeof(string));
    
            var kParameter = k != null ?
                new ObjectParameter("K", k) :
                new ObjectParameter("K", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            var nCParameter = nC != null ?
                new ObjectParameter("NC", nC) :
                new ObjectParameter("NC", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var lastOptionParameter = lastOption != null ?
                new ObjectParameter("LastOption", lastOption) :
                new ObjectParameter("LastOption", typeof(string));
    
            var registerDateParameter = registerDate != null ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(string));
    
            var orderParameter = order != null ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(string));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var slgParameter = slg.HasValue ?
                new ObjectParameter("Slg", slg) :
                new ObjectParameter("Slg", typeof(int));
    
            var soJigParameter = soJig != null ?
                new ObjectParameter("SoJig", soJig) :
                new ObjectParameter("SoJig", typeof(string));
    
            var startParameter = start != null ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(string));
    
            var tGGCParameter = tGGC.HasValue ?
                new ObjectParameter("TGGC", tGGC) :
                new ObjectParameter("TGGC", typeof(double));
    
            var tGGLParameter = tGGL.HasValue ?
                new ObjectParameter("TGGL", tGGL) :
                new ObjectParameter("TGGL", typeof(double));
    
            var thoiHanParameter = thoiHan != null ?
                new ObjectParameter("ThoiHan", thoiHan) :
                new ObjectParameter("ThoiHan", typeof(string));
    
            var tinhTrangParameter = tinhTrang.HasValue ?
                new ObjectParameter("TinhTrang", tinhTrang) :
                new ObjectParameter("TinhTrang", typeof(int));
    
            var tTNCParameter = tTNC != null ?
                new ObjectParameter("TTNC", tTNC) :
                new ObjectParameter("TTNC", typeof(string));
    
            var via_check1Parameter = via_check1 != null ?
                new ObjectParameter("Via_check1", via_check1) :
                new ObjectParameter("Via_check1", typeof(string));
    
            var via_check2Parameter = via_check2 != null ?
                new ObjectParameter("Via_check2", via_check2) :
                new ObjectParameter("Via_check2", typeof(string));
    
            var via_ghi_chuParameter = via_ghi_chu != null ?
                new ObjectParameter("Via_ghi_chu", via_ghi_chu) :
                new ObjectParameter("Via_ghi_chu", typeof(string));
    
            var p__10Parameter = p__10.HasValue ?
                new ObjectParameter("p__10", p__10) :
                new ObjectParameter("p__10", typeof(int));
    
            var p__20Parameter = p__20.HasValue ?
                new ObjectParameter("p__20", p__20) :
                new ObjectParameter("p__20", typeof(int));
    
            var p__80Parameter = p__80.HasValue ?
                new ObjectParameter("p__80", p__80) :
                new ObjectParameter("p__80", typeof(int));
    
            var fac_MachineIDParameter = fac_MachineID != null ?
                new ObjectParameter("Fac_MachineID", fac_MachineID) :
                new ObjectParameter("Fac_MachineID", typeof(string));
    
            var fac_DcParameter = fac_Dc.HasValue ?
                new ObjectParameter("Fac_Dc", fac_Dc) :
                new ObjectParameter("Fac_Dc", typeof(bool));
    
            var kT_SupParameter = kT_Sup != null ?
                new ObjectParameter("KT_Sup", kT_Sup) :
                new ObjectParameter("KT_Sup", typeof(string));
    
            var kT_TGUKB1Parameter = kT_TGUKB1.HasValue ?
                new ObjectParameter("KT_TGUKB1", kT_TGUKB1) :
                new ObjectParameter("KT_TGUKB1", typeof(int));
    
            var kT_TongTGParameter = kT_TongTG.HasValue ?
                new ObjectParameter("KT_TongTG", kT_TongTG) :
                new ObjectParameter("KT_TongTG", typeof(double));
    
            var kT_TTPhoiParameter = kT_TTPhoi.HasValue ?
                new ObjectParameter("KT_TTPhoi", kT_TTPhoi) :
                new ObjectParameter("KT_TTPhoi", typeof(int));
    
            var kT_GiaHangParameter = kT_GiaHang != null ?
                new ObjectParameter("KT_GiaHang", kT_GiaHang) :
                new ObjectParameter("KT_GiaHang", typeof(string));
    
            var kT_KHXNParameter = kT_KHXN != null ?
                new ObjectParameter("KT_KHXN", kT_KHXN) :
                new ObjectParameter("KT_KHXN", typeof(string));
    
            var kT_LyDoKHTKHParameter = kT_LyDoKHTKH != null ?
                new ObjectParameter("KT_LyDoKHTKH", kT_LyDoKHTKH) :
                new ObjectParameter("KT_LyDoKHTKH", typeof(string));
    
            var kT_DgoiTayParameter = kT_DgoiTay != null ?
                new ObjectParameter("KT_DgoiTay", kT_DgoiTay) :
                new ObjectParameter("KT_DgoiTay", typeof(string));
    
            var cua_GCTimeParameter = cua_GCTime != null ?
                new ObjectParameter("Cua_GCTime", cua_GCTime) :
                new ObjectParameter("Cua_GCTime", typeof(string));
    
            var cua_FactoryParameter = cua_Factory != null ?
                new ObjectParameter("Cua_Factory", cua_Factory) :
                new ObjectParameter("Cua_Factory", typeof(string));
    
            var cua_TotalTimeParameter = cua_TotalTime.HasValue ?
                new ObjectParameter("Cua_TotalTime", cua_TotalTime) :
                new ObjectParameter("Cua_TotalTime", typeof(double));
    
            var cua_PlantimeParameter = cua_Plantime.HasValue ?
                new ObjectParameter("Cua_Plantime", cua_Plantime) :
                new ObjectParameter("Cua_Plantime", typeof(double));
    
            var cua_PrepareDateParameter = cua_PrepareDate != null ?
                new ObjectParameter("Cua_PrepareDate", cua_PrepareDate) :
                new ObjectParameter("Cua_PrepareDate", typeof(string));
    
            var cua_MachineGroupParameter = cua_MachineGroup != null ?
                new ObjectParameter("Cua_MachineGroup", cua_MachineGroup) :
                new ObjectParameter("Cua_MachineGroup", typeof(string));
    
            var cua_StateParameter = cua_State.HasValue ?
                new ObjectParameter("Cua_State", cua_State) :
                new ObjectParameter("Cua_State", typeof(bool));
    
            var cua_SizeParameter = cua_Size != null ?
                new ObjectParameter("Cua_Size", cua_Size) :
                new ObjectParameter("Cua_Size", typeof(string));
    
            var tongTGParameter = tongTG != null ?
                new ObjectParameter("TongTG", tongTG) :
                new ObjectParameter("TongTG", typeof(string));
    
            var nestingParameter = nesting != null ?
                new ObjectParameter("Nesting", nesting) :
                new ObjectParameter("Nesting", typeof(string));
    
            var phoiddParameter = phoidd != null ?
                new ObjectParameter("Phoidd", phoidd) :
                new ObjectParameter("Phoidd", typeof(string));
    
            var viTriGiaParameter = viTriGia != null ?
                new ObjectParameter("ViTriGia", viTriGia) :
                new ObjectParameter("ViTriGia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_InsertPlan", iDParameter, dateParameter, deptParameter, dKmayParameter, fac_DaChuanBiParameter, fac_DaoParameter, fac_DeXuatParameter, fac_FileParameter, fac_JigParameter, fac_NgayHTTheoKHParameter, fac_NGTruocParameter, fac_NG_OldParameter, fac_OK_OldParameter, fac_PhoiParameter, fac_TTParameter, fac_TTFileParameter, fac_TTGCParameter, fac_TTTHParameter, finishParameter, jigParameter, kParameter, machineIDParameter, nCParameter, noteParameter, lastOptionParameter, registerDateParameter, orderParameter, partIDParameter, shiftParameter, slgParameter, soJigParameter, startParameter, tGGCParameter, tGGLParameter, thoiHanParameter, tinhTrangParameter, tTNCParameter, via_check1Parameter, via_check2Parameter, via_ghi_chuParameter, p__10Parameter, p__20Parameter, p__80Parameter, fac_MachineIDParameter, fac_DcParameter, kT_SupParameter, kT_TGUKB1Parameter, kT_TongTGParameter, kT_TTPhoiParameter, kT_GiaHangParameter, kT_KHXNParameter, kT_LyDoKHTKHParameter, kT_DgoiTayParameter, cua_GCTimeParameter, cua_FactoryParameter, cua_TotalTimeParameter, cua_PlantimeParameter, cua_PrepareDateParameter, cua_MachineGroupParameter, cua_StateParameter, cua_SizeParameter, tongTGParameter, nestingParameter, phoiddParameter, viTriGiaParameter);
        }
    
        public virtual ObjectResult<sp_242_Inventory_Result> sp_242_Inventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_Inventory_Result>("sp_242_Inventory");
        }
    
        public virtual ObjectResult<sp_242_Inventory_PlaceOfItem_Result> sp_242_Inventory_PlaceOfItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_Inventory_PlaceOfItem_Result>("sp_242_Inventory_PlaceOfItem");
        }
    
        public virtual ObjectResult<sp_242_InventoryExport_GetAll_Result> sp_242_InventoryExport_GetAll(string partNo)
        {
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_InventoryExport_GetAll_Result>("sp_242_InventoryExport_GetAll", partNoParameter);
        }
    
        public virtual ObjectResult<sp_242_InventoryReceived_GetAll_Result> sp_242_InventoryReceived_GetAll(string partNo)
        {
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_InventoryReceived_GetAll_Result>("sp_242_InventoryReceived_GetAll", partNoParameter);
        }
    
        public virtual ObjectResult<sp_242_MachineHavePlan_Rate_Result> sp_242_MachineHavePlan_Rate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_MachineHavePlan_Rate_Result>("sp_242_MachineHavePlan_Rate", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_MachinePlan_Preparation_Result> sp_242_MachinePlan_Preparation(Nullable<System.DateTime> fromDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_MachinePlan_Preparation_Result>("sp_242_MachinePlan_Preparation", fromDateParameter);
        }
    
        public virtual ObjectResult<sp_242_MachinePlanning_CheckPlan_Result> sp_242_MachinePlanning_CheckPlan(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_MachinePlanning_CheckPlan_Result>("sp_242_MachinePlanning_CheckPlan", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<Sp_242_MachinePlanning_GetPlanforMachine_Result> Sp_242_MachinePlanning_GetPlanforMachine(Nullable<System.DateTime> date, string shift, string mayGC)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var mayGCParameter = mayGC != null ?
                new ObjectParameter("mayGC", mayGC) :
                new ObjectParameter("mayGC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_242_MachinePlanning_GetPlanforMachine_Result>("Sp_242_MachinePlanning_GetPlanforMachine", dateParameter, shiftParameter, mayGCParameter);
        }
    
        public virtual ObjectResult<sp_242_MachinePlanning_GetUrgentProcessingPlan_Result> sp_242_MachinePlanning_GetUrgentProcessingPlan(string shift, Nullable<System.DateTime> date, string group)
        {
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var groupParameter = group != null ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_MachinePlanning_GetUrgentProcessingPlan_Result>("sp_242_MachinePlanning_GetUrgentProcessingPlan", shiftParameter, dateParameter, groupParameter);
        }
    
        public virtual ObjectResult<sp_242_MachinePlanning_GetValuationOverview_Result> sp_242_MachinePlanning_GetValuationOverview(string shift, Nullable<System.DateTime> date, string machineID)
        {
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_MachinePlanning_GetValuationOverview_Result>("sp_242_MachinePlanning_GetValuationOverview", shiftParameter, dateParameter, machineIDParameter);
        }
    
        public virtual int sp_242_MachinePlanning_PlanOK(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_MachinePlanning_PlanOK", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_242_MachinePlanning_UpdateNewQty(string nC, string order, string partID, Nullable<int> slg)
        {
            var nCParameter = nC != null ?
                new ObjectParameter("NC", nC) :
                new ObjectParameter("NC", typeof(string));
    
            var orderParameter = order != null ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(string));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var slgParameter = slg.HasValue ?
                new ObjectParameter("Slg", slg) :
                new ObjectParameter("Slg", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_MachinePlanning_UpdateNewQty", nCParameter, orderParameter, partIDParameter, slgParameter);
        }
    
        public virtual ObjectResult<sp_242_MachineWTS_GetLastShiftOfPlan_Result> sp_242_MachineWTS_GetLastShiftOfPlan(string shift)
        {
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_MachineWTS_GetLastShiftOfPlan_Result>("sp_242_MachineWTS_GetLastShiftOfPlan", shiftParameter);
        }
    
        public virtual ObjectResult<sp_242_MachineWTS_GetRunningTime_Result> sp_242_MachineWTS_GetRunningTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_MachineWTS_GetRunningTime_Result>("sp_242_MachineWTS_GetRunningTime");
        }
    
        public virtual ObjectResult<sp_242_ManualExcutionChecking_DoesNotFollowWTSQty_Result> sp_242_ManualExcutionChecking_DoesNotFollowWTSQty(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ManualExcutionChecking_DoesNotFollowWTSQty_Result>("sp_242_ManualExcutionChecking_DoesNotFollowWTSQty", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_ManualExcutionChecking_GetAll_Result> sp_242_ManualExcutionChecking_GetAll(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ManualExcutionChecking_GetAll_Result>("sp_242_ManualExcutionChecking_GetAll", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_242_ManualExcutionChecking_GetChecked_Result> sp_242_ManualExcutionChecking_GetChecked(string mONo, string partNo, string optionID)
        {
            var mONoParameter = mONo != null ?
                new ObjectParameter("MONo", mONo) :
                new ObjectParameter("MONo", typeof(string));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ManualExcutionChecking_GetChecked_Result>("sp_242_ManualExcutionChecking_GetChecked", mONoParameter, partNoParameter, optionIDParameter);
        }
    
        public virtual ObjectResult<sp_242_ManualExcutionChecking_GetTotal_Result> sp_242_ManualExcutionChecking_GetTotal(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ManualExcutionChecking_GetTotal_Result>("sp_242_ManualExcutionChecking_GetTotal", fromdateParameter, todateParameter);
        }
    
        public virtual int sp_242_Material_Update(string materialID, Nullable<double> density, Nullable<decimal> unitPrice, string type, Nullable<int> iD, Nullable<System.DateTime> dateModified, string staffID)
        {
            var materialIDParameter = materialID != null ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(string));
    
            var densityParameter = density.HasValue ?
                new ObjectParameter("Density", density) :
                new ObjectParameter("Density", typeof(double));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateModifiedParameter = dateModified.HasValue ?
                new ObjectParameter("DateModified", dateModified) :
                new ObjectParameter("DateModified", typeof(System.DateTime));
    
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_Material_Update", materialIDParameter, densityParameter, unitPriceParameter, typeParameter, iDParameter, dateModifiedParameter, staffIDParameter);
        }
    
        public virtual int sp_242_MOOption_Insert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_MOOption_Insert");
        }
    
        public virtual int sp_242_Option_Update(Nullable<int> iD, string deptCode, string optionID, string note, Nullable<bool> deleted)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var deptCodeParameter = deptCode != null ?
                new ObjectParameter("DeptCode", deptCode) :
                new ObjectParameter("DeptCode", typeof(string));
    
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_Option_Update", iDParameter, deptCodeParameter, optionIDParameter, noteParameter, deletedParameter);
        }
    
        public virtual ObjectResult<sp_242_Optiondata_GetForWTS_Result> sp_242_Optiondata_GetForWTS(string mono, string optionID)
        {
            var monoParameter = mono != null ?
                new ObjectParameter("mono", mono) :
                new ObjectParameter("mono", typeof(string));
    
            var optionIDParameter = optionID != null ?
                new ObjectParameter("optionID", optionID) :
                new ObjectParameter("optionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_Optiondata_GetForWTS_Result>("sp_242_Optiondata_GetForWTS", monoParameter, optionIDParameter);
        }
    
        public virtual int sp_242_OptionData_Update(Nullable<int> iD, Nullable<System.DateTime> inputDate, string partID, string machineID, string optionID, Nullable<bool> lastOption, string jigID, Nullable<int> toolQty, Nullable<double> proTime, Nullable<double> clampTime, Nullable<bool> techDate, Nullable<System.DateTime> updateDay, string staffID, string note, Nullable<double> aondNote, string memo, Nullable<System.DateTime> cLUpdateday, string jigType, Nullable<bool> jig, string tich, string doc, string timeTreo, string timeComplete, string editStaffID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var inputDateParameter = inputDate.HasValue ?
                new ObjectParameter("InputDate", inputDate) :
                new ObjectParameter("InputDate", typeof(System.DateTime));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            var lastOptionParameter = lastOption.HasValue ?
                new ObjectParameter("LastOption", lastOption) :
                new ObjectParameter("LastOption", typeof(bool));
    
            var jigIDParameter = jigID != null ?
                new ObjectParameter("JigID", jigID) :
                new ObjectParameter("JigID", typeof(string));
    
            var toolQtyParameter = toolQty.HasValue ?
                new ObjectParameter("ToolQty", toolQty) :
                new ObjectParameter("ToolQty", typeof(int));
    
            var proTimeParameter = proTime.HasValue ?
                new ObjectParameter("ProTime", proTime) :
                new ObjectParameter("ProTime", typeof(double));
    
            var clampTimeParameter = clampTime.HasValue ?
                new ObjectParameter("ClampTime", clampTime) :
                new ObjectParameter("ClampTime", typeof(double));
    
            var techDateParameter = techDate.HasValue ?
                new ObjectParameter("TechDate", techDate) :
                new ObjectParameter("TechDate", typeof(bool));
    
            var updateDayParameter = updateDay.HasValue ?
                new ObjectParameter("UpdateDay", updateDay) :
                new ObjectParameter("UpdateDay", typeof(System.DateTime));
    
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var aondNoteParameter = aondNote.HasValue ?
                new ObjectParameter("AondNote", aondNote) :
                new ObjectParameter("AondNote", typeof(double));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var cLUpdatedayParameter = cLUpdateday.HasValue ?
                new ObjectParameter("CLUpdateday", cLUpdateday) :
                new ObjectParameter("CLUpdateday", typeof(System.DateTime));
    
            var jigTypeParameter = jigType != null ?
                new ObjectParameter("JigType", jigType) :
                new ObjectParameter("JigType", typeof(string));
    
            var jigParameter = jig.HasValue ?
                new ObjectParameter("Jig", jig) :
                new ObjectParameter("Jig", typeof(bool));
    
            var tichParameter = tich != null ?
                new ObjectParameter("Tich", tich) :
                new ObjectParameter("Tich", typeof(string));
    
            var docParameter = doc != null ?
                new ObjectParameter("Doc", doc) :
                new ObjectParameter("Doc", typeof(string));
    
            var timeTreoParameter = timeTreo != null ?
                new ObjectParameter("TimeTreo", timeTreo) :
                new ObjectParameter("TimeTreo", typeof(string));
    
            var timeCompleteParameter = timeComplete != null ?
                new ObjectParameter("TimeComplete", timeComplete) :
                new ObjectParameter("TimeComplete", typeof(string));
    
            var editStaffIDParameter = editStaffID != null ?
                new ObjectParameter("EditStaffID", editStaffID) :
                new ObjectParameter("EditStaffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_OptionData_Update", iDParameter, inputDateParameter, partIDParameter, machineIDParameter, optionIDParameter, lastOptionParameter, jigIDParameter, toolQtyParameter, proTimeParameter, clampTimeParameter, techDateParameter, updateDayParameter, staffIDParameter, noteParameter, aondNoteParameter, memoParameter, cLUpdatedayParameter, jigTypeParameter, jigParameter, tichParameter, docParameter, timeTreoParameter, timeCompleteParameter, editStaffIDParameter);
        }
    
        public virtual int sp_242_Part_Insert()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_Part_Insert");
        }
    
        public virtual ObjectResult<sp_242_Part_Inventory_Result> sp_242_Part_Inventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_Part_Inventory_Result>("sp_242_Part_Inventory");
        }
    
        public virtual int sp_242_Part_Update(Nullable<int> iD, string partNo, string partName, string customerID, string supplierID, Nullable<int> upQty, Nullable<int> giaThanh, Nullable<bool> deleted)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var partNoParameter = partNo != null ?
                new ObjectParameter("PartNo", partNo) :
                new ObjectParameter("PartNo", typeof(string));
    
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            var supplierIDParameter = supplierID != null ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(string));
    
            var upQtyParameter = upQty.HasValue ?
                new ObjectParameter("UpQty", upQty) :
                new ObjectParameter("UpQty", typeof(int));
    
            var giaThanhParameter = giaThanh.HasValue ?
                new ObjectParameter("GiaThanh", giaThanh) :
                new ObjectParameter("GiaThanh", typeof(int));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_Part_Update", iDParameter, partNoParameter, partNameParameter, customerIDParameter, supplierIDParameter, upQtyParameter, giaThanhParameter, deletedParameter);
        }
    
        public virtual int sp_242_PartData_UpdateMaterial(Nullable<int> iD, Nullable<System.DateTime> inputDate, string materialID, string materialType, string partID, string workpiecesize, string shape, Nullable<double> thickness, string width, Nullable<double> lenght, Nullable<bool> cut, Nullable<bool> rawMachine, Nullable<bool> handFinish, Nullable<bool> hairLine, Nullable<bool> wAnod, Nullable<bool> bAnod, Nullable<bool> blast30, Nullable<bool> blast60, Nullable<bool> seal, Nullable<bool> migaki, Nullable<bool> bafu, Nullable<bool> cleanwave, Nullable<bool> vacPac, Nullable<bool> helisert, Nullable<bool> serialNo, Nullable<bool> palCoat, Nullable<bool> caciras, Nullable<bool> inLuoi, Nullable<bool> heru, Nullable<bool> niken, Nullable<bool> maiBongDP, Nullable<bool> maBong, Nullable<bool> inside, Nullable<bool> bBD, Nullable<bool> paint, string otherpro, Nullable<decimal> price, string memo, string note)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var inputDateParameter = inputDate.HasValue ?
                new ObjectParameter("InputDate", inputDate) :
                new ObjectParameter("InputDate", typeof(System.DateTime));
    
            var materialIDParameter = materialID != null ?
                new ObjectParameter("MaterialID", materialID) :
                new ObjectParameter("MaterialID", typeof(string));
    
            var materialTypeParameter = materialType != null ?
                new ObjectParameter("MaterialType", materialType) :
                new ObjectParameter("MaterialType", typeof(string));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var workpiecesizeParameter = workpiecesize != null ?
                new ObjectParameter("workpiecesize", workpiecesize) :
                new ObjectParameter("workpiecesize", typeof(string));
    
            var shapeParameter = shape != null ?
                new ObjectParameter("shape", shape) :
                new ObjectParameter("shape", typeof(string));
    
            var thicknessParameter = thickness.HasValue ?
                new ObjectParameter("thickness", thickness) :
                new ObjectParameter("thickness", typeof(double));
    
            var widthParameter = width != null ?
                new ObjectParameter("width", width) :
                new ObjectParameter("width", typeof(string));
    
            var lenghtParameter = lenght.HasValue ?
                new ObjectParameter("lenght", lenght) :
                new ObjectParameter("lenght", typeof(double));
    
            var cutParameter = cut.HasValue ?
                new ObjectParameter("cut", cut) :
                new ObjectParameter("cut", typeof(bool));
    
            var rawMachineParameter = rawMachine.HasValue ?
                new ObjectParameter("rawMachine", rawMachine) :
                new ObjectParameter("rawMachine", typeof(bool));
    
            var handFinishParameter = handFinish.HasValue ?
                new ObjectParameter("handFinish", handFinish) :
                new ObjectParameter("handFinish", typeof(bool));
    
            var hairLineParameter = hairLine.HasValue ?
                new ObjectParameter("hairLine", hairLine) :
                new ObjectParameter("hairLine", typeof(bool));
    
            var wAnodParameter = wAnod.HasValue ?
                new ObjectParameter("wAnod", wAnod) :
                new ObjectParameter("wAnod", typeof(bool));
    
            var bAnodParameter = bAnod.HasValue ?
                new ObjectParameter("bAnod", bAnod) :
                new ObjectParameter("bAnod", typeof(bool));
    
            var blast30Parameter = blast30.HasValue ?
                new ObjectParameter("blast30", blast30) :
                new ObjectParameter("blast30", typeof(bool));
    
            var blast60Parameter = blast60.HasValue ?
                new ObjectParameter("blast60", blast60) :
                new ObjectParameter("blast60", typeof(bool));
    
            var sealParameter = seal.HasValue ?
                new ObjectParameter("seal", seal) :
                new ObjectParameter("seal", typeof(bool));
    
            var migakiParameter = migaki.HasValue ?
                new ObjectParameter("migaki", migaki) :
                new ObjectParameter("migaki", typeof(bool));
    
            var bafuParameter = bafu.HasValue ?
                new ObjectParameter("Bafu", bafu) :
                new ObjectParameter("Bafu", typeof(bool));
    
            var cleanwaveParameter = cleanwave.HasValue ?
                new ObjectParameter("Cleanwave", cleanwave) :
                new ObjectParameter("Cleanwave", typeof(bool));
    
            var vacPacParameter = vacPac.HasValue ?
                new ObjectParameter("VacPac", vacPac) :
                new ObjectParameter("VacPac", typeof(bool));
    
            var helisertParameter = helisert.HasValue ?
                new ObjectParameter("Helisert", helisert) :
                new ObjectParameter("Helisert", typeof(bool));
    
            var serialNoParameter = serialNo.HasValue ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(bool));
    
            var palCoatParameter = palCoat.HasValue ?
                new ObjectParameter("PalCoat", palCoat) :
                new ObjectParameter("PalCoat", typeof(bool));
    
            var cacirasParameter = caciras.HasValue ?
                new ObjectParameter("Caciras", caciras) :
                new ObjectParameter("Caciras", typeof(bool));
    
            var inLuoiParameter = inLuoi.HasValue ?
                new ObjectParameter("InLuoi", inLuoi) :
                new ObjectParameter("InLuoi", typeof(bool));
    
            var heruParameter = heru.HasValue ?
                new ObjectParameter("Heru", heru) :
                new ObjectParameter("Heru", typeof(bool));
    
            var nikenParameter = niken.HasValue ?
                new ObjectParameter("Niken", niken) :
                new ObjectParameter("Niken", typeof(bool));
    
            var maiBongDPParameter = maiBongDP.HasValue ?
                new ObjectParameter("MaiBongDP", maiBongDP) :
                new ObjectParameter("MaiBongDP", typeof(bool));
    
            var maBongParameter = maBong.HasValue ?
                new ObjectParameter("MaBong", maBong) :
                new ObjectParameter("MaBong", typeof(bool));
    
            var insideParameter = inside.HasValue ?
                new ObjectParameter("Inside", inside) :
                new ObjectParameter("Inside", typeof(bool));
    
            var bBDParameter = bBD.HasValue ?
                new ObjectParameter("BBD", bBD) :
                new ObjectParameter("BBD", typeof(bool));
    
            var paintParameter = paint.HasValue ?
                new ObjectParameter("Paint", paint) :
                new ObjectParameter("Paint", typeof(bool));
    
            var otherproParameter = otherpro != null ?
                new ObjectParameter("Otherpro", otherpro) :
                new ObjectParameter("Otherpro", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var memoParameter = memo != null ?
                new ObjectParameter("Memo", memo) :
                new ObjectParameter("Memo", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_PartData_UpdateMaterial", iDParameter, inputDateParameter, materialIDParameter, materialTypeParameter, partIDParameter, workpiecesizeParameter, shapeParameter, thicknessParameter, widthParameter, lenghtParameter, cutParameter, rawMachineParameter, handFinishParameter, hairLineParameter, wAnodParameter, bAnodParameter, blast30Parameter, blast60Parameter, sealParameter, migakiParameter, bafuParameter, cleanwaveParameter, vacPacParameter, helisertParameter, serialNoParameter, palCoatParameter, cacirasParameter, inLuoiParameter, heruParameter, nikenParameter, maiBongDPParameter, maBongParameter, insideParameter, bBDParameter, paintParameter, otherproParameter, priceParameter, memoParameter, noteParameter);
        }
    
        public virtual int sp_242_Planning_Delete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_Planning_Delete", iDParameter);
        }
    
        public virtual int sp_242_Planning_Update(Nullable<int> iD, string k, string date, string shift, string mayGC, string nC, string order, string dept, string note, Nullable<bool> deleted)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var kParameter = k != null ?
                new ObjectParameter("K", k) :
                new ObjectParameter("K", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var mayGCParameter = mayGC != null ?
                new ObjectParameter("MayGC", mayGC) :
                new ObjectParameter("MayGC", typeof(string));
    
            var nCParameter = nC != null ?
                new ObjectParameter("NC", nC) :
                new ObjectParameter("NC", typeof(string));
    
            var orderParameter = order != null ?
                new ObjectParameter("Order", order) :
                new ObjectParameter("Order", typeof(string));
    
            var deptParameter = dept != null ?
                new ObjectParameter("Dept", dept) :
                new ObjectParameter("Dept", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_Planning_Update", iDParameter, kParameter, dateParameter, shiftParameter, mayGCParameter, nCParameter, orderParameter, deptParameter, noteParameter, deletedParameter);
        }
    
        public virtual int sp_242_ResultMachineWTS(string shift, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_ResultMachineWTS", shiftParameter, fromdateParameter, todateParameter);
        }
    
        public virtual int sp_242_ResultMachineWTS_AllShift(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_ResultMachineWTS_AllShift", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_242_SoSanhHangTonVoiDonHang_Result> sp_242_SoSanhHangTonVoiDonHang(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_SoSanhHangTonVoiDonHang_Result>("sp_242_SoSanhHangTonVoiDonHang", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_SoSanhHangTonVoiDonHang_Tong_Result> sp_242_SoSanhHangTonVoiDonHang_Tong(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_SoSanhHangTonVoiDonHang_Tong_Result>("sp_242_SoSanhHangTonVoiDonHang_Tong", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_StandTimeManualChecking_Current_Result> sp_242_StandTimeManualChecking_Current(Nullable<int> plannID, string workID)
        {
            var plannIDParameter = plannID.HasValue ?
                new ObjectParameter("plannID", plannID) :
                new ObjectParameter("plannID", typeof(int));
    
            var workIDParameter = workID != null ?
                new ObjectParameter("WorkID", workID) :
                new ObjectParameter("WorkID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_StandTimeManualChecking_Current_Result>("sp_242_StandTimeManualChecking_Current", plannIDParameter, workIDParameter);
        }
    
        public virtual ObjectResult<sp_242_StandTimeManualChecking_GetTotalForReport_Result> sp_242_StandTimeManualChecking_GetTotalForReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_StandTimeManualChecking_GetTotalForReport_Result>("sp_242_StandTimeManualChecking_GetTotalForReport", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_StandTimeManualChecking_GetTotalForReport_BySubGroup_Result> sp_242_StandTimeManualChecking_GetTotalForReport_BySubGroup(string workID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var workIDParameter = workID != null ?
                new ObjectParameter("WorkID", workID) :
                new ObjectParameter("WorkID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_StandTimeManualChecking_GetTotalForReport_BySubGroup_Result>("sp_242_StandTimeManualChecking_GetTotalForReport_BySubGroup", workIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_StandTimeManualChecking_GetTotalForReport_BySubGroup_Detail_Result> sp_242_StandTimeManualChecking_GetTotalForReport_BySubGroup_Detail(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_StandTimeManualChecking_GetTotalForReport_BySubGroup_Detail_Result>("sp_242_StandTimeManualChecking_GetTotalForReport_BySubGroup_Detail", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_tErrorItemNotify_GetDeleted_Result> sp_242_tErrorItemNotify_GetDeleted(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_tErrorItemNotify_GetDeleted_Result>("sp_242_tErrorItemNotify_GetDeleted", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_ThongKeHangThieu_Result> sp_242_ThongKeHangThieu(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ThongKeHangThieu_Result>("sp_242_ThongKeHangThieu", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_ThongKeHangThieu_New_Result> sp_242_ThongKeHangThieu_New(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ThongKeHangThieu_New_Result>("sp_242_ThongKeHangThieu_New", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_ToLenh_Result> sp_242_ToLenh(string order)
        {
            var orderParameter = order != null ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ToLenh_Result>("sp_242_ToLenh", orderParameter);
        }
    
        public virtual ObjectResult<sp_242_ToolNeedToReturn_Result> sp_242_ToolNeedToReturn(string machineID)
        {
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_ToolNeedToReturn_Result>("sp_242_ToolNeedToReturn", machineIDParameter);
        }
    
        public virtual ObjectResult<SP_242_Tracking_Result> SP_242_Tracking()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_242_Tracking_Result>("SP_242_Tracking");
        }
    
        public virtual ObjectResult<sp_242_WTS_DirectWorkPercen_Result> sp_242_WTS_DirectWorkPercen(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_DirectWorkPercen_Result>("sp_242_WTS_DirectWorkPercen", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_GetAll_Result> sp_242_WTS_GetAll(string fromDate, string toDate, string shift, string machineID, string staffID, string staffCheck)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            var staffCheckParameter = staffCheck != null ?
                new ObjectParameter("StaffCheck", staffCheck) :
                new ObjectParameter("StaffCheck", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_GetAll_Result>("sp_242_WTS_GetAll", fromDateParameter, toDateParameter, shiftParameter, machineIDParameter, staffIDParameter, staffCheckParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_GetDetailWTSForChecking_Result> sp_242_WTS_GetDetailWTSForChecking(string staffID, string leader, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("staffID", staffID) :
                new ObjectParameter("staffID", typeof(string));
    
            var leaderParameter = leader != null ?
                new ObjectParameter("leader", leader) :
                new ObjectParameter("leader", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_GetDetailWTSForChecking_Result>("sp_242_WTS_GetDetailWTSForChecking", staffIDParameter, leaderParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_GetLT_Result> sp_242_WTS_GetLT(string mONo, string optionID)
        {
            var mONoParameter = mONo != null ?
                new ObjectParameter("MONo", mONo) :
                new ObjectParameter("MONo", typeof(string));
    
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_GetLT_Result>("sp_242_WTS_GetLT", mONoParameter, optionIDParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_getNG_But_NotErrorNotify_Result> sp_242_WTS_getNG_But_NotErrorNotify(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_getNG_But_NotErrorNotify_Result>("sp_242_WTS_getNG_But_NotErrorNotify", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_GetTotalWTSForChecking_Result> sp_242_WTS_GetTotalWTSForChecking(string staffID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("staffID", staffID) :
                new ObjectParameter("staffID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_GetTotalWTSForChecking_Result>("sp_242_WTS_GetTotalWTSForChecking", staffIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_GetUpdateTGTC_Result> sp_242_WTS_GetUpdateTGTC()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_GetUpdateTGTC_Result>("sp_242_WTS_GetUpdateTGTC");
        }
    
        public virtual ObjectResult<sp_242_WTS_GetUpdateTGTC_Detail_Result> sp_242_WTS_GetUpdateTGTC_Detail(string partID, string optionID)
        {
            var partIDParameter = partID != null ?
                new ObjectParameter("partID", partID) :
                new ObjectParameter("partID", typeof(string));
    
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_GetUpdateTGTC_Detail_Result>("sp_242_WTS_GetUpdateTGTC_Detail", partIDParameter, optionIDParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_InputWrongTime_Result> sp_242_WTS_InputWrongTime(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_InputWrongTime_Result>("sp_242_WTS_InputWrongTime", fromDateParameter, toDateParameter);
        }
    
        public virtual int sp_242_WTS_InsertOrUpdate(Nullable<int> iD, string iDPlan, string date, string staffID, string shift, string machineID, string optionID, string mONo, string workID, Nullable<decimal> time, Nullable<int> oKQty, Nullable<int> nGQty, Nullable<int> nGNCTruoc, string note, Nullable<bool> deleted, string partID, string note1, string note2, Nullable<double> proTime, Nullable<double> clampTime, Nullable<bool> status, string updateStaff)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var iDPlanParameter = iDPlan != null ?
                new ObjectParameter("IDPlan", iDPlan) :
                new ObjectParameter("IDPlan", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var staffIDParameter = staffID != null ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(string));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("Shift", shift) :
                new ObjectParameter("Shift", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            var mONoParameter = mONo != null ?
                new ObjectParameter("MONo", mONo) :
                new ObjectParameter("MONo", typeof(string));
    
            var workIDParameter = workID != null ?
                new ObjectParameter("WorkID", workID) :
                new ObjectParameter("WorkID", typeof(string));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(decimal));
    
            var oKQtyParameter = oKQty.HasValue ?
                new ObjectParameter("OKQty", oKQty) :
                new ObjectParameter("OKQty", typeof(int));
    
            var nGQtyParameter = nGQty.HasValue ?
                new ObjectParameter("NGQty", nGQty) :
                new ObjectParameter("NGQty", typeof(int));
    
            var nGNCTruocParameter = nGNCTruoc.HasValue ?
                new ObjectParameter("NGNCTruoc", nGNCTruoc) :
                new ObjectParameter("NGNCTruoc", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(bool));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var note1Parameter = note1 != null ?
                new ObjectParameter("Note1", note1) :
                new ObjectParameter("Note1", typeof(string));
    
            var note2Parameter = note2 != null ?
                new ObjectParameter("Note2", note2) :
                new ObjectParameter("Note2", typeof(string));
    
            var proTimeParameter = proTime.HasValue ?
                new ObjectParameter("ProTime", proTime) :
                new ObjectParameter("ProTime", typeof(double));
    
            var clampTimeParameter = clampTime.HasValue ?
                new ObjectParameter("ClampTime", clampTime) :
                new ObjectParameter("ClampTime", typeof(double));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var updateStaffParameter = updateStaff != null ?
                new ObjectParameter("UpdateStaff", updateStaff) :
                new ObjectParameter("UpdateStaff", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_242_WTS_InsertOrUpdate", iDParameter, iDPlanParameter, dateParameter, staffIDParameter, shiftParameter, machineIDParameter, optionIDParameter, mONoParameter, workIDParameter, timeParameter, oKQtyParameter, nGQtyParameter, nGNCTruocParameter, noteParameter, deletedParameter, partIDParameter, note1Parameter, note2Parameter, proTimeParameter, clampTimeParameter, statusParameter, updateStaffParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_Permission_Result> sp_242_WTS_Permission()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_Permission_Result>("sp_242_WTS_Permission");
        }
    
        public virtual ObjectResult<sp_242_WTS_RateTimeWorkInTotal_Result> sp_242_WTS_RateTimeWorkInTotal(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_RateTimeWorkInTotal_Result>("sp_242_WTS_RateTimeWorkInTotal", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_RateTimeWorkInTotal_Machine_Result> sp_242_WTS_RateTimeWorkInTotal_Machine(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string machineID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("machineID", machineID) :
                new ObjectParameter("machineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_RateTimeWorkInTotal_Machine_Result>("sp_242_WTS_RateTimeWorkInTotal_Machine", fromDateParameter, toDateParameter, machineIDParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_StandTimeWorkPercen_Result> sp_242_WTS_StandTimeWorkPercen(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_StandTimeWorkPercen_Result>("sp_242_WTS_StandTimeWorkPercen", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_SuaSauDuyet_Result> sp_242_WTS_SuaSauDuyet(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("staffID", staffID) :
                new ObjectParameter("staffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_SuaSauDuyet_Result>("sp_242_WTS_SuaSauDuyet", staffIDParameter);
        }
    
        public virtual ObjectResult<sp_242_WTS_TiLeWorkInDay_Result> sp_242_WTS_TiLeWorkInDay(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_242_WTS_TiLeWorkInDay_Result>("sp_242_WTS_TiLeWorkInDay", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_333_Tool_GetListExistedToolInMachine_Result> sp_333_Tool_GetListExistedToolInMachine(string machineID, string toolID)
        {
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            var toolIDParameter = toolID != null ?
                new ObjectParameter("ToolID", toolID) :
                new ObjectParameter("ToolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_333_Tool_GetListExistedToolInMachine_Result>("sp_333_Tool_GetListExistedToolInMachine", machineIDParameter, toolIDParameter);
        }
    
        public virtual ObjectResult<sp_AcquireMachine_CompareWithPlan_Result> sp_AcquireMachine_CompareWithPlan(string group, Nullable<System.DateTime> date, string shift)
        {
            var groupParameter = group != null ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AcquireMachine_CompareWithPlan_Result>("sp_AcquireMachine_CompareWithPlan", groupParameter, dateParameter, shiftParameter);
        }
    
        public virtual ObjectResult<sp_AcquireMachineChatHistory_Result> sp_AcquireMachineChatHistory(string group)
        {
            var groupParameter = group != null ?
                new ObjectParameter("group", group) :
                new ObjectParameter("group", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AcquireMachineChatHistory_Result>("sp_AcquireMachineChatHistory", groupParameter);
        }
    
        public virtual ObjectResult<string> sp_DanhSachNhanVienDacBiet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_DanhSachNhanVienDacBiet");
        }
    
        public virtual int sp_GetAllMachineWWTS_Cache(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAllMachineWWTS_Cache", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<sp_GetAllOrder_Result> sp_GetAllOrder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllOrder_Result>("sp_GetAllOrder");
        }
    
        public virtual ObjectResult<sp_GetAllOrderJigNull_Result> sp_GetAllOrderJigNull()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllOrderJigNull_Result>("sp_GetAllOrderJigNull");
        }
    
        public virtual ObjectResult<sp_GetAllOrderNull_Result> sp_GetAllOrderNull()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllOrderNull_Result>("sp_GetAllOrderNull");
        }
    
        public virtual ObjectResult<sp_GetAllOrderNull_Normal_Result> sp_GetAllOrderNull_Normal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllOrderNull_Normal_Result>("sp_GetAllOrderNull_Normal");
        }
    
        public virtual ObjectResult<sp_GetMachineHavePlan_Result> sp_GetMachineHavePlan(Nullable<System.DateTime> date, string department)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMachineHavePlan_Result>("sp_GetMachineHavePlan", dateParameter, departmentParameter);
        }
    
        public virtual ObjectResult<sp_GetMachinePlanForFactory_Result> sp_GetMachinePlanForFactory(Nullable<System.DateTime> date, string shift, string machineID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("machineID", machineID) :
                new ObjectParameter("machineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMachinePlanForFactory_Result>("sp_GetMachinePlanForFactory", dateParameter, shiftParameter, machineIDParameter);
        }
    
        public virtual ObjectResult<sp_GetMachinePlanForFactory_TGTC_Result> sp_GetMachinePlanForFactory_TGTC(Nullable<System.DateTime> date, string shift, string machineID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("machineID", machineID) :
                new ObjectParameter("machineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMachinePlanForFactory_TGTC_Result>("sp_GetMachinePlanForFactory_TGTC", dateParameter, shiftParameter, machineIDParameter);
        }
    
        public virtual ObjectResult<sp_GetReportByStaffID_Result> sp_GetReportByStaffID(string staffID)
        {
            var staffIDParameter = staffID != null ?
                new ObjectParameter("staffID", staffID) :
                new ObjectParameter("staffID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportByStaffID_Result>("sp_GetReportByStaffID", staffIDParameter);
        }
    
        public virtual ObjectResult<sp_GetResultOfCheckMachineProcess_Result> sp_GetResultOfCheckMachineProcess(Nullable<System.DateTime> date, string shift, string machineID)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var shiftParameter = shift != null ?
                new ObjectParameter("shift", shift) :
                new ObjectParameter("shift", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("machineID", machineID) :
                new ObjectParameter("machineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetResultOfCheckMachineProcess_Result>("sp_GetResultOfCheckMachineProcess", dateParameter, shiftParameter, machineIDParameter);
        }
    
        public virtual ObjectResult<string> sp_GetShiftHaveMachinePlan(string machineid, Nullable<System.DateTime> date)
        {
            var machineidParameter = machineid != null ?
                new ObjectParameter("machineid", machineid) :
                new ObjectParameter("machineid", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetShiftHaveMachinePlan", machineidParameter, dateParameter);
        }
    
        public virtual int sp_LeaderReport_Auto_Create_Data()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LeaderReport_Auto_Create_Data");
        }
    
        public virtual ObjectResult<sp_P_LayNCLam_KH_Result> sp_P_LayNCLam_KH()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_P_LayNCLam_KH_Result>("sp_P_LayNCLam_KH");
        }
    
        public virtual ObjectResult<sp_shinkDatabase_Result> sp_shinkDatabase()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_shinkDatabase_Result>("sp_shinkDatabase");
        }
    
        public virtual int sp_UpdateOrderNull(string order, string ordernull)
        {
            var orderParameter = order != null ?
                new ObjectParameter("order", order) :
                new ObjectParameter("order", typeof(string));
    
            var ordernullParameter = ordernull != null ?
                new ObjectParameter("ordernull", ordernull) :
                new ObjectParameter("ordernull", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateOrderNull", orderParameter, ordernullParameter);
        }
    
        public virtual ObjectResult<sp_WTS_CompareQtyWithLastOption_Result> sp_WTS_CompareQtyWithLastOption(string optionID, string lastOptionID, string partID, string mONo)
        {
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            var lastOptionIDParameter = lastOptionID != null ?
                new ObjectParameter("LastOptionID", lastOptionID) :
                new ObjectParameter("LastOptionID", typeof(string));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var mONoParameter = mONo != null ?
                new ObjectParameter("MONo", mONo) :
                new ObjectParameter("MONo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WTS_CompareQtyWithLastOption_Result>("sp_WTS_CompareQtyWithLastOption", optionIDParameter, lastOptionIDParameter, partIDParameter, mONoParameter);
        }
    
        public virtual ObjectResult<sp_WTS_CompareQtyWithLastOption_Old_Result> sp_WTS_CompareQtyWithLastOption_Old(string optionID, string lastOptionID, string partID, string mONo)
        {
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            var lastOptionIDParameter = lastOptionID != null ?
                new ObjectParameter("LastOptionID", lastOptionID) :
                new ObjectParameter("LastOptionID", typeof(string));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var mONoParameter = mONo != null ?
                new ObjectParameter("MONo", mONo) :
                new ObjectParameter("MONo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WTS_CompareQtyWithLastOption_Old_Result>("sp_WTS_CompareQtyWithLastOption_Old", optionIDParameter, lastOptionIDParameter, partIDParameter, mONoParameter);
        }
    
        public virtual ObjectResult<sp_WTS_CompareQtyWithMOQty_Result> sp_WTS_CompareQtyWithMOQty(string optionID, string partID, string mONo)
        {
            var optionIDParameter = optionID != null ?
                new ObjectParameter("OptionID", optionID) :
                new ObjectParameter("OptionID", typeof(string));
    
            var partIDParameter = partID != null ?
                new ObjectParameter("PartID", partID) :
                new ObjectParameter("PartID", typeof(string));
    
            var mONoParameter = mONo != null ?
                new ObjectParameter("MONo", mONo) :
                new ObjectParameter("MONo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WTS_CompareQtyWithMOQty_Result>("sp_WTS_CompareQtyWithMOQty", optionIDParameter, partIDParameter, mONoParameter);
        }
    }
}
